!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AT	log.h	18;"	d
BEGIN_WITH	utils.h	36;"	d
CFGHOMENAME	config.h	14;"	d
CFGNAME	config.h	13;"	d
CFG_MAP	config.h	/^	CFG_MAP(XX)$/;"	e	enum:cfg_keys
CFG_MAP	config.h	16;"	d
CFG_UNKNOW	config.h	/^    	CFG_UNKNOW$/;"	e	enum:cfg_keys
COLOR_CODE	log.h	36;"	d
COLOR_END	log.h	38;"	d
COLOR_MAP	log.h	/^COLOR_MAP(XX)$/;"	e	enum:color_types
COLOR_MAP	log.h	20;"	d
COLOR_START	log.h	37;"	d
CONFIG_H	config.h	11;"	d
CONTEXT_TYPE_MAP	http.h	/^CONTEXT_TYPE_MAP(XX)$/;"	e	enum:http_cxt_types
CONTEXT_TYPE_MAP	http.h	44;"	d
COVERFETCH_H	coverfetch.h	11;"	d
COVERPATTERN	doubancover.c	38;"	d	file:
DCRLF	http.h	25;"	d
DEF_COVER_NAME	coverfetch.h	13;"	d
DEF_PORT	http.h	15;"	d
DEF_SKIN	ui/ui.h	71;"	d
DEF_TIMEOUT	http.h	16;"	d
DIR_SEARCH_DEPTH	utils.h	114;"	d
GB	http.h	21;"	d
HAS_FLAG	utils.h	35;"	d
HTTP_COOKIE	http.h	/^    HTTP_NOCOOKIE, HTTP_COOKIE$/;"	e	enum:http_flags
HTTP_CXT_UNKNOW	http.h	/^HTTP_CXT_UNKNOW$/;"	e	enum:http_cxt_types
HTTP_H	http.h	11;"	d
HTTP_HDR_SIZE	http.h	24;"	d
HTTP_MTD_UNKNOW	http.h	/^HTTP_MTD_UNKNOW$/;"	e	enum:http_mtd_types
HTTP_NOCOOKIE	http.h	/^    HTTP_NOCOOKIE, HTTP_COOKIE$/;"	e	enum:http_flags
INFO_NA	ui/ui_player_info.c	17;"	d	file:
INIT_CHK	config.c	48;"	d	file:
INIT_OK	config.c	49;"	d	file:
KB	http.h	19;"	d
LAB_FORMAT	ui/ui_player_info.c	16;"	d	file:
LOG_H	log.h	11;"	d
MB	http.h	20;"	d
METHOD_TYPE_MAP	http.h	/^METHOD_TYPE_MAP(XX)$/;"	e	enum:http_mtd_types
METHOD_TYPE_MAP	http.h	29;"	d
MPD_H	mpd.h	11;"	d
MSG2_FILE	log.h	14;"	d
MSG2_TERM	log.h	13;"	d
MSG_MAP	log.h	/^    MSG_MAP(XX)$/;"	e	enum:msg_types
MSG_MAP	log.h	47;"	d
MSG_UNKNOW	log.h	/^    MSG_UNKNOW$/;"	e	enum:msg_types
PERM	http.h	17;"	d
PLAYER_H	player.h	11;"	d
PLAYER_PAUSE	player.h	/^	PLAYER_PAUSE,$/;"	e	enum:player_status
PLAYER_PLAY	player.h	/^	PLAYER_PLAY,$/;"	e	enum:player_status
PLAYER_STOP	player.h	/^	PLAYER_STOP,$/;"	e	enum:player_status
PLAYER_UNKNOW	player.h	/^	PLAYER_UNKNOW$/;"	e	enum:player_status
SEARCH_API	doubancover.c	33;"	d	file:
STR	log.h	17;"	d
STR2	log.h	16;"	d
TIMEOUT	doubancover.c	39;"	d	file:
TIMEOUT	http.c	18;"	d	file:
TIMEOUT_ALL	utils.h	/^    TIMEOUT_ALL         = (1 << 3) - 1,$/;"	e	enum:time_flag
TIMEOUT_ERROR	utils.h	/^    TIMEOUT_ERROR       = 1 << 2,$/;"	e	enum:time_flag
TIMEOUT_READ	utils.h	/^    TIMEOUT_READ        = 1 << 0,$/;"	e	enum:time_flag
TIMEOUT_UNKNOW	utils.h	/^    TIMEOUT_UNKNOW$/;"	e	enum:time_flag
TIMEOUT_WRITE	utils.h	/^    TIMEOUT_WRITE       = 1 << 1,$/;"	e	enum:time_flag
TRAY_ICON	ui/ui.h	72;"	d
TRAY_SIZE	ui/ui.h	73;"	d
UAGENT	http.h	27;"	d
UI_H	ui/ui.h	11;"	d
UTILS_H	utils.h	11;"	d
VERSION	main.c	21;"	d	file:
XX	config.c	31;"	d	file:
XX	config.c	33;"	d	file:
XX	config.h	28;"	d
XX	config.h	30;"	d
XX	http.h	124;"	d
XX	http.h	126;"	d
XX	http.h	134;"	d
XX	http.h	136;"	d
XX	http.h	144;"	d
XX	http.h	146;"	d
XX	http.h	53;"	d
XX	http.h	55;"	d
XX	http.h	61;"	d
XX	http.h	63;"	d
XX	log.c	25;"	d	file:
XX	log.c	27;"	d	file:
XX	log.c	35;"	d	file:
XX	log.c	37;"	d	file:
XX	log.c	44;"	d	file:
XX	log.c	46;"	d	file:
XX	log.h	30;"	d
XX	log.h	32;"	d
XX	log.h	59;"	d
XX	log.h	61;"	d
_DEBUG	log.h	76;"	d
_DEBUG	log.h	78;"	d
_ERROR	log.h	73;"	d
_INFO	log.h	71;"	d
_WARN	log.h	72;"	d
___DEBUG	config.c	10;"	d	file:
___DEBUG	coverfetch.c	10;"	d	file:
___DEBUG	http_compile.c	10;"	d	file:
___DEBUG	http_fetch.c	10;"	d	file:
___DEBUG	mpd.c	10;"	d	file:
___MSG	log.h	42;"	d
___MSG	log.h	44;"	d
___TEMPLATE_INIT	http_compile.c	11;"	d	file:
addr	http.h	/^    struct http_addr *addr;$/;"	m	struct:http_req	typeref:struct:http_req::http_addr	access:public
album	player.h	/^	char *album;$/;"	m	struct:player_music_info	access:public
album	ui/ui.h	/^	struct ui_skin_label *album;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
albumcover	ui/ui.h	/^	struct ui_skin_albumcover *albumcover;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_albumcover	access:public
align	ui/ui.h	/^	float align;$/;"	m	struct:ui_skin_label	access:public
artist	player.h	/^	char *artist;$/;"	m	struct:player_music_info	access:public
artist	ui/ui.h	/^	struct ui_skin_label *artist;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
cfg	config.c	/^struct cfg$/;"	s	file:
cfg::cfgkey	config.c	/^        enum cfg_keys cfgkey;$/;"	m	struct:cfg	typeref:enum:cfg::cfg_keys	file:	access:public
cfg::name	config.c	/^        char *name;$/;"	m	struct:cfg	file:	access:public
cfg::value	config.c	/^        char *value;$/;"	m	struct:cfg	file:	access:public
cfg_check	config.c	/^static void cfg_check()$/;"	f	file:
cfg_check	config.c	/^static void cfg_check();$/;"	p	file:
cfg_filename	config.c	/^static char *cfg_filename;$/;"	v	file:
cfg_get	config.c	/^static char *cfg_get(enum cfg_keys cfg_key)$/;"	f	file:	signature:(enum cfg_keys cfg_key)
cfg_get	config.c	/^static char *cfg_get(enum cfg_keys cfg_key);$/;"	p	file:	signature:(enum cfg_keys cfg_key)
cfg_get_coverpath	config.c	/^char *cfg_get_coverpath()$/;"	f
cfg_get_coverpath	config.h	/^char *cfg_get_coverpath();$/;"	p	signature:()
cfg_get_debug	config.c	/^int cfg_get_debug()$/;"	f
cfg_get_debug	config.h	/^int cfg_get_debug();$/;"	p	signature:()
cfg_get_logfile	config.c	/^char *cfg_get_logfile()$/;"	f
cfg_get_logfile	config.h	/^char *cfg_get_logfile();$/;"	p	signature:()
cfg_get_musicpath	config.c	/^char *cfg_get_musicpath()$/;"	f
cfg_get_musicpath	config.h	/^char *cfg_get_musicpath();$/;"	p	signature:()
cfg_get_pos	config.c	/^struct position const *cfg_get_pos(struct position *pos)$/;"	f	signature:(struct position *pos)
cfg_get_pos	config.h	/^struct position const *cfg_get_pos(struct position *pos);$/;"	p	signature:(struct position *pos)
cfg_get_pos_lock	config.c	/^unsigned int cfg_get_pos_lock()$/;"	f
cfg_get_pos_lock	config.h	/^unsigned int cfg_get_pos_lock();$/;"	p	signature:()
cfg_get_rule	config.c	/^char *cfg_get_rule()$/;"	f
cfg_get_rule	config.h	/^char *cfg_get_rule();$/;"	p	signature:()
cfg_get_skinname	config.c	/^char *cfg_get_skinname()$/;"	f
cfg_get_skinname	config.h	/^char *cfg_get_skinname();$/;"	p	signature:()
cfg_get_skinpath	config.c	/^char *cfg_get_skinpath()$/;"	f
cfg_get_skinpath	config.h	/^char *cfg_get_skinpath();$/;"	p	signature:()
cfg_init	config.c	/^static int cfg_init;$/;"	v	file:
cfg_keys	config.h	/^enum cfg_keys$/;"	g
cfg_load	config.c	/^void cfg_load(const char * const filename)$/;"	f	signature:(const char * const filename)
cfg_load	config.h	/^void cfg_load(const char * const filename);$/;"	p	signature:(const char * const filename)
cfg_lock	config.c	/^static pthread_mutex_t cfg_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
cfg_refresh	config.c	/^void cfg_refresh()$/;"	f
cfg_refresh	config.h	/^void cfg_refresh();$/;"	p	signature:()
cfg_resolver	config.c	/^static FILE *cfg_resolver()$/;"	f	file:
cfg_resolver	config.c	/^static FILE *cfg_resolver();$/;"	p	file:
cfg_set	config.c	/^static void cfg_set(enum cfg_keys cfg_key, const char *value)$/;"	f	file:	signature:(enum cfg_keys cfg_key, const char *value)
cfg_set	config.c	/^static void cfg_set(enum cfg_keys, const char *value);$/;"	p	file:	signature:(enum cfg_keys, const char *value)
cfg_set_debug	config.c	/^void cfg_set_debug()$/;"	f
cfg_set_debug	config.h	/^void cfg_set_debug();$/;"	p	signature:()
cfg_set_postion	config.c	/^void cfg_set_postion(const struct position const *pos)$/;"	f	signature:(const struct position const *pos)
cfg_set_postion	config.h	/^void cfg_set_postion(const struct position * const pos);$/;"	p	signature:(const struct position * const pos)
cfg_set_postion_lock	config.c	/^void cfg_set_postion_lock()$/;"	f
cfg_set_postion_lock	config.h	/^void cfg_set_postion_lock();$/;"	p	signature:()
cfg_set_skinname	config.c	/^void cfg_set_skinname(const char * const skin_name)$/;"	f	signature:(const char * const skin_name)
cfg_set_skinname	config.h	/^void cfg_set_skinname(const char * const skin_name);$/;"	p	signature:(const char * const skin_name)
cfgkey	config.c	/^        enum cfg_keys cfgkey;$/;"	m	struct:cfg	typeref:enum:cfg::cfg_keys	file:	access:public
cfgs	config.c	/^static struct cfg cfgs[] = $/;"	v	typeref:struct:cfg	file:
clean_name	utils.c	/^char *clean_name(char *name)$/;"	f	signature:(char *name)
clean_name	utils.h	/^char *clean_name(char *name);$/;"	p	signature:(char *name)
clean_reg	utils.c	/^char *clean_reg(char *str)$/;"	f	signature:(char *str)
clean_reg	utils.h	/^char *clean_reg(char *str);$/;"	p	signature:(char *str)
color	ui/ui.h	/^	char *color;$/;"	m	struct:ui_skin_label	access:public
color_types	log.h	/^enum color_types$/;"	g
container	ui/ui_cover.c	/^static GtkWidget *container;$/;"	v	file:
container	ui/ui_player_control.c	/^static GtkWidget *container;$/;"	v	file:
cookie	http.h	/^    char *cookie;$/;"	m	struct:http_res	access:public
coverfetch	coverfetch.h	/^typedef char *(*coverfetch)(char *, const char *);$/;"	t
current_skin	ui/ui_skin.c	/^static struct ui_skin *current_skin;$/;"	v	typeref:struct:ui_skin	file:
cxt_types	http.h	/^struct file_type cxt_types[] =$/;"	v	typeref:struct:file_type
debug	config.c	/^static int debug;$/;"	v	file:
die	log.c	/^void die(const char *format, ...)$/;"	f	signature:(const char *format, ...)
die	log.h	/^void die(const char *format, ...);$/;"	p	signature:(const char *format, ...)
dir_search	utils.c	/^char **dir_search(const char *path, const char *pattern, int depth, int max_matched)$/;"	f	signature:(const char *path, const char *pattern, int depth, int max_matched)
dir_search	utils.h	/^char **dir_search(const char *path, const char *pattern, int depth, int max_matched);$/;"	p	signature:(const char *path, const char *pattern, int depth, int max_matched)
dir_search_p	utils.c	/^static char **dir_search_p(const char *path, const char *pattern, int depth, char ***res, int *idx, int max_matched)$/;"	f	file:	signature:(const char *path, const char *pattern, int depth, char ***res, int *idx, int max_matched)
dir_search_p	utils.c	/^static char **dir_search_p(const char *path, const char *pattern, int depth, char ***res, int *idx, int max_matched);$/;"	p	file:	signature:(const char *path, const char *pattern, int depth, char ***res, int *idx, int max_matched)
do_fetch	doubancover.c	/^static char *do_fetch(const char *url, char *key)$/;"	f	file:	signature:(const char *url, char *key)
do_fetch	doubancover.c	/^static char *do_fetch(const char *url, char *key);$/;"	p	file:	signature:(const char *url, char *key)
do_match	doubancover.c	/^static char *do_match(int fd, const char *pattern)$/;"	f	file:	signature:(int fd, const char *pattern)
do_match	doubancover.c	/^static char *do_match(int fd, const char *pattern);$/;"	p	file:	signature:(int fd, const char *pattern)
do_search	doubancover.c	/^static int do_search(char *key, char **tmpfile)$/;"	f	file:	signature:(char *key, char **tmpfile)
do_search	doubancover.c	/^static int do_search(char *key, char **tmpfile);$/;"	p	file:	signature:(char *key, char **tmpfile)
doubancover	coverfetch.h	/^char *doubancover(char *key, const char *filepath);$/;"	p	signature:(char *key, const char *filepath)
doubancover	doubancover.c	/^char *doubancover(char *key, const char *filepath)$/;"	f	signature:(char *key, const char *filepath)
e_img_btn_handle	ui/ui_player_control.c	/^static int e_img_btn_handle(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_img_btn_handle	ui/ui_player_control.c	/^static int e_img_btn_handle(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_menu_popup	ui/ui_menu.c	/^static int e_menu_popup(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_menu_popup	ui/ui_menu.c	/^static int e_menu_popup(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_next	ui/ui_player_control.c	/^static int e_player_next(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_next	ui/ui_player_control.c	/^static int e_player_next(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_prev	ui/ui_player_control.c	/^static int e_player_prev(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_prev	ui/ui_player_control.c	/^static int e_player_prev(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_status	ui/ui_player_control.c	/^static int e_player_status(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_player_status	ui/ui_player_control.c	/^static int e_player_status(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_window_drag	ui/ui_menu.c	/^static int e_window_drag(GtkWidget *widget, GdkEventButton *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
e_window_drag	ui/ui_menu.c	/^static int e_window_drag(GtkWidget *widget, GdkEventButton *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event, void *data)
enable	ui/ui.h	/^	int enable;$/;"	m	struct:ui_skin_label	access:public
ext	http.h	/^    char *ext;$/;"	m	struct:file_type	access:public
file_type	http.h	/^struct file_type$/;"	s
file_type::ext	http.h	/^    char *ext;$/;"	m	struct:file_type	access:public
file_type::idx	http.h	/^    enum http_cxt_types idx;$/;"	m	struct:file_type	typeref:enum:file_type::http_cxt_types	access:public
file_type::tname	http.h	/^    char *tname;$/;"	m	struct:file_type	access:public
font	ui/ui.h	/^	char *font;$/;"	m	struct:ui_skin_label	access:public
from_hex	utils.c	/^static char from_hex(char ch)$/;"	f	file:	signature:(char ch)
from_hex	utils.c	/^static char from_hex(char ch);$/;"	p	file:	signature:(char ch)
getcover	coverfetch.c	/^char *getcover(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)$/;"	f	signature:(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)
getcover	coverfetch.h	/^char *getcover(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch);$/;"	p	signature:(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)
getcover_local	coverfetch.c	/^static char *getcover_local(const char *uri, const char *artist, const char *title)$/;"	f	file:	signature:(const char *uri, const char *artist, const char *title)
getcover_local	coverfetch.c	/^static char *getcover_local(const char *uri, const char *artist, const char *title);$/;"	p	file:	signature:(const char *uri, const char *artist, const char *title)
getcover_network	coverfetch.c	/^static char *getcover_network(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)$/;"	f	file:	signature:(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)
getcover_network	coverfetch.c	/^static char *getcover_network(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch);$/;"	p	file:	signature:(const char *uri, const char *artist, const char *title, const char *album, coverfetch fetch)
getcover_network_v	coverfetch.c	/^static char *getcover_network_v(coverfetch fetch, char *path, const char *format, ...)$/;"	f	file:	signature:(coverfetch fetch, char *path, const char *format, ...)
getcover_network_v	coverfetch.c	/^static char *getcover_network_v(coverfetch fetch, char *path, const char *format, ...);$/;"	p	file:	signature:(coverfetch fetch, char *path, const char *format, ...)
hdr	http.h	/^    char *hdr;$/;"	m	struct:http_req	access:public
hdr_gen	http.h	/^typedef char *(*hdr_gen)(char *host, char *uri, enum http_cxt_types type, char *data);$/;"	t
height	ui/ui.h	/^	int height;$/;"	m	struct:ui_skin	access:public
height	ui/ui.h	/^	int height;$/;"	m	struct:ui_skin_albumcover	access:public
host	http.h	/^    char *host;$/;"	m	struct:http_addr	access:public
http_addr	http.h	/^struct http_addr$/;"	s
http_addr::host	http.h	/^    char *host;$/;"	m	struct:http_addr	access:public
http_addr::port	http.h	/^    uint16_t port;$/;"	m	struct:http_addr	access:public
http_addr::uri	http.h	/^    char *uri;$/;"	m	struct:http_addr	access:public
http_addr::url	http.h	/^    char *url;$/;"	m	struct:http_addr	access:public
http_closeconn	http.h	/^void http_closeconn(int connfd);$/;"	p	signature:(int connfd)
http_closeconn	http_connect.c	/^void http_closeconn(int connfd)$/;"	f	signature:(int connfd)
http_compile	http.h	/^struct http_req *http_compile(char *url, enum http_mtd_types method, hdr_gen func,$/;"	p	signature:(char *url, enum http_mtd_types method, hdr_gen func, enum http_cxt_types type, char *data)
http_compile	http_compile.c	/^struct http_req *http_compile(char *url, enum http_mtd_types method, hdr_gen func,$/;"	f	signature:(char *url, enum http_mtd_types method, hdr_gen func, enum http_cxt_types type, char *data)
http_connect	http.h	/^int http_connect(struct http_addr *addr, unsigned int timeout);$/;"	p	signature:(struct http_addr *addr, unsigned int timeout)
http_connect	http_connect.c	/^int http_connect(struct http_addr *addr, unsigned int timeout)$/;"	f	signature:(struct http_addr *addr, unsigned int timeout)
http_cxt_type	http_exec.c	/^static struct file_type *http_cxt_type(char *tname)$/;"	f	file:	signature:(char *tname)
http_cxt_type	http_exec.c	/^static struct file_type *http_cxt_type(char *tname);$/;"	p	file:	signature:(char *tname)
http_cxt_types	http.h	/^enum http_cxt_types$/;"	g
http_do_fetch	http_fetch.c	/^static int http_do_fetch(int connfd, char *fullname, struct http_res *res)$/;"	f	file:	signature:(int connfd, char *fullname, struct http_res *res)
http_do_fetch	http_fetch.c	/^static int http_do_fetch(int connfd, char *fullname, struct http_res *res);$/;"	p	file:	signature:(int connfd, char *fullname, struct http_res *res)
http_exec	http.h	/^struct http_res *http_exec(int connfd, struct http_req *req, unsigned int timeout);$/;"	p	signature:(int connfd, struct http_req *req, unsigned int timeout)
http_exec	http_exec.c	/^struct http_res *http_exec(int connfd, struct http_req *req, unsigned int timeout)$/;"	f	signature:(int connfd, struct http_req *req, unsigned int timeout)
http_fetch	http.h	/^char *http_fetch(int connfd, struct http_res *res, char *filename);$/;"	p	signature:(int connfd, struct http_res *res, char *filename)
http_fetch	http_fetch.c	/^char *http_fetch(int connfd, struct http_res *res, char *filename)$/;"	f	signature:(int connfd, struct http_res *res, char *filename)
http_flags	http.h	/^enum http_flags$/;"	g
http_get_cookie	http.c	/^static char *http_get_cookie(int conn, struct http_req *req)$/;"	f	file:	signature:(int conn, struct http_req *req)
http_get_cookie	http.c	/^static char *http_get_cookie(int conn, struct http_req *req);$/;"	p	file:	signature:(int conn, struct http_req *req)
http_getfile	http.c	/^char *http_getfile(char *url, char *fname, enum http_flags flag)$/;"	f	signature:(char *url, char *fname, enum http_flags flag)
http_getfile	http.h	/^char *http_getfile(char *url, char *fname, enum http_flags flag);$/;"	p	signature:(char *url, char *fname, enum http_flags flag)
http_mtd_types	http.h	/^enum http_mtd_types$/;"	g
http_pr_req	http.h	/^void http_pr_req(struct http_req *req);$/;"	p	signature:(struct http_req *req)
http_pr_req	http_compile.c	/^void http_pr_req(struct http_req *req)$/;"	f	signature:(struct http_req *req)
http_pr_res	http.h	/^void http_pr_res(struct http_res *res);$/;"	p	signature:(struct http_res *res)
http_pr_res	http_exec.c	/^void http_pr_res(struct http_res *res)$/;"	f	signature:(struct http_res *res)
http_req	http.h	/^struct http_req$/;"	s
http_req::addr	http.h	/^    struct http_addr *addr;$/;"	m	struct:http_req	typeref:struct:http_req::http_addr	access:public
http_req::hdr	http.h	/^    char *hdr;$/;"	m	struct:http_req	access:public
http_req_free	http.h	/^void http_req_free(struct http_req *ptr);$/;"	p	signature:(struct http_req *ptr)
http_req_free	http_compile.c	/^void http_req_free(struct http_req *ptr)$/;"	f	signature:(struct http_req *ptr)
http_req_hdr_comm	http_compile.c	/^static char *http_req_hdr_comm(enum http_mtd_types method, char *host, char *uri)$/;"	f	file:	signature:(enum http_mtd_types method, char *host, char *uri)
http_req_hdr_comm	http_compile.c	/^static char *http_req_hdr_comm(enum http_mtd_types method, char *host, char *uri);$/;"	p	file:	signature:(enum http_mtd_types method, char *host, char *uri)
http_req_hdr_get	http.h	/^char *http_req_hdr_get(char *host, char *uri, enum http_cxt_types type, char *data);$/;"	p	signature:(char *host, char *uri, enum http_cxt_types type, char *data)
http_req_hdr_get	http_compile.c	/^char *http_req_hdr_get(char *host, char *uri, enum http_cxt_types type, char *data)$/;"	f	signature:(char *host, char *uri, enum http_cxt_types type, char *data)
http_req_hdr_hdr	http.h	/^char *http_req_hdr_hdr(char *host, char *uri, enum http_cxt_types type, char *data);$/;"	p	signature:(char *host, char *uri, enum http_cxt_types type, char *data)
http_req_hdr_hdr	http_compile.c	/^char *http_req_hdr_hdr(char *host, char *uri, enum http_cxt_types type, char *data)$/;"	f	signature:(char *host, char *uri, enum http_cxt_types type, char *data)
http_res	http.h	/^struct http_res$/;"	s
http_res::cookie	http.h	/^    char *cookie;$/;"	m	struct:http_res	access:public
http_res::length	http.h	/^    unsigned long length;$/;"	m	struct:http_res	access:public
http_res::minor	http.h	/^    unsigned int minor;$/;"	m	struct:http_res	access:public
http_res::status_code	http.h	/^    unsigned int status_code;$/;"	m	struct:http_res	access:public
http_res::tail	http.h	/^    char *tail;$/;"	m	struct:http_res	access:public
http_res::tail_len	http.h	/^    unsigned long tail_len;$/;"	m	struct:http_res	access:public
http_res::type	http.h	/^    struct file_type *type;$/;"	m	struct:http_res	typeref:struct:http_res::file_type	access:public
http_res_attr	http_exec.c	/^static int http_res_attr(char *hdr, struct http_res *res)$/;"	f	file:	signature:(char *hdr, struct http_res *res)
http_res_attr	http_exec.c	/^static int http_res_attr(char *hdr, struct http_res *res);$/;"	p	file:	signature:(char *hdr, struct http_res *res)
http_res_free	http.h	/^void http_res_free(struct http_res *ptr);$/;"	p	signature:(struct http_res *ptr)
http_res_free	http_exec.c	/^void http_res_free(struct http_res *res)$/;"	f	signature:(struct http_res *res)
http_res_gethdr	http_exec.c	/^static char *http_res_gethdr(int connfd, char **tail, unsigned long *tail_len)$/;"	f	file:	signature:(int connfd, char **tail, unsigned long *tail_len)
http_res_gethdr	http_exec.c	/^static char *http_res_gethdr(int connfd, char **tail, unsigned long *tail_len);$/;"	p	file:	signature:(int connfd, char **tail, unsigned long *tail_len)
http_url_check	http_compile.c	/^static int http_url_check(char const *url)$/;"	f	file:	signature:(char const *url)
http_url_check	http_compile.c	/^static int http_url_check(char const *url);$/;"	p	file:	signature:(char const *url)
id	player.h	/^	unsigned int id;$/;"	m	struct:player_music_info	access:public
idx	http.h	/^    enum http_cxt_types idx;$/;"	m	struct:file_type	typeref:enum:file_type::http_cxt_types	access:public
if_null_return	log.h	81;"	d
if_null_return_null	log.h	87;"	d
img_case	ui/ui.h	/^	struct ui_skin_image *img_case;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
img_next	ui/ui.h	/^	struct ui_skin_image *img_next;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
img_pause	ui/ui.h	/^	struct ui_skin_image *img_pause;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
img_play	ui/ui.h	/^	struct ui_skin_image *img_play;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
img_prev	ui/ui.h	/^	struct ui_skin_image *img_prev;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
lab_album	ui/ui_player_info.c	/^static GtkWidget *lab_album;$/;"	v	file:
lab_artist	ui/ui_player_info.c	/^static GtkWidget *lab_artist;$/;"	v	file:
lab_title	ui/ui_player_info.c	/^static GtkWidget *lab_title;$/;"	v	file:
length	http.h	/^    unsigned long length;$/;"	m	struct:http_res	access:public
main	main.c	/^int main(int argc, const char **argv)$/;"	f	signature:(int argc, const char **argv)
max_char	ui/ui.h	/^	int max_char;$/;"	m	struct:ui_skin_label	access:public
minor	http.h	/^    unsigned int minor;$/;"	m	struct:http_res	access:public
mpd_currentstaus	mpd.h	/^int mpd_currentstaus(struct mpd_status **status, struct mpd_entity **entity);$/;"	p	signature:(struct mpd_status **status, struct mpd_entity **entity)
mpd_get_connection	mpd.c	/^struct mpd_connection *mpd_get_connection()$/;"	f
mpd_get_song	mpd.c	/^struct mpd_song *mpd_get_song()$/;"	f
mpd_get_status	mpd.c	/^struct mpd_status *mpd_get_status()$/;"	f
mpd_song_album	mpd.h	/^const char *mpd_song_album(const struct mpd_song *song);$/;"	p	signature:(const struct mpd_song *song)
mpd_song_artist	mpd.h	/^const char *mpd_song_artist(const struct mpd_song *song);$/;"	p	signature:(const struct mpd_song *song)
mpd_song_pos	mpd.h	/^const unsigned int mpd_song_pos(const struct mpd_song *song);$/;"	p	signature:(const struct mpd_song *song)
mpd_song_tag	mpd.c	/^const char *mpd_song_tag(const struct mpd_song *song, enum mpd_tag_type type)$/;"	f	signature:(const struct mpd_song *song, enum mpd_tag_type type)
mpd_song_tag	mpd.h	/^const char *mpd_song_tag(const struct mpd_song *song, enum mpd_tag_type type);$/;"	p	signature:(const struct mpd_song *song, enum mpd_tag_type type)
mpd_song_title	mpd.h	/^const char *mpd_song_title(const struct mpd_song *song);$/;"	p	signature:(const struct mpd_song *song)
mpd_song_uri	mpd.h	/^const char *mpd_song_uri(const struct mpd_song *song);$/;"	p	signature:(const struct mpd_song *song)
msg_color	log.c	/^int msg_color[] = $/;"	v
msg_out	log.c	/^int msg_out[] =$/;"	v
msg_prefix	log.c	/^char *msg_prefix[] =$/;"	v
msg_types	log.h	/^enum msg_types$/;"	g
name	config.c	/^        char *name;$/;"	m	struct:cfg	file:	access:public
name	ui/ui.h	/^	char *name;$/;"	m	struct:ui_skin	access:public
nocover	ui/ui.h	/^	char *nocover;$/;"	m	struct:ui_skin_albumcover	access:public
old_info	ui/ui_main.c	/^static struct player_music_info *old_info;$/;"	v	typeref:struct:player_music_info	file:
path_real	utils.c	/^char *path_real(const char *path, char *filename)$/;"	f	signature:(const char *path, char *filename)
path_real	utils.h	/^char *path_real(const char *path, char *filename);$/;"	p	signature:(const char *path, char *filename)
path_wildcard	utils.c	/^char *path_wildcard(const char *str)$/;"	f	signature:(const char *str)
path_wildcard	utils.h	/^char *path_wildcard(const char *str);$/;"	p	signature:(const char *str)
player_get_music_info	mpd.c	/^struct player_music_info *player_get_music_info()$/;"	f
player_get_music_info	player.h	/^struct player_music_info *player_get_music_info();$/;"	p	signature:()
player_get_status	mpd.c	/^enum player_status player_get_status()$/;"	f
player_get_status	player.h	/^enum player_status player_get_status();$/;"	p	signature:()
player_music_info	player.h	/^struct player_music_info$/;"	s
player_music_info::album	player.h	/^	char *album;$/;"	m	struct:player_music_info	access:public
player_music_info::artist	player.h	/^	char *artist;$/;"	m	struct:player_music_info	access:public
player_music_info::id	player.h	/^	unsigned int id;$/;"	m	struct:player_music_info	access:public
player_music_info::title	player.h	/^	char *title;$/;"	m	struct:player_music_info	access:public
player_music_info::uri	player.h	/^	char *uri;$/;"	m	struct:player_music_info	access:public
player_music_info_free	player.c	/^void player_music_info_free(struct player_music_info *ptr)$/;"	f	signature:(struct player_music_info *ptr)
player_music_info_free	player.h	/^void player_music_info_free(struct player_music_info *info);$/;"	p	signature:(struct player_music_info *info)
player_next	mpd.c	/^int player_next()$/;"	f
player_next	player.h	/^int player_next();$/;"	p	signature:()
player_prev	mpd.c	/^int player_prev()$/;"	f
player_prev	player.h	/^int player_prev();$/;"	p	signature:()
player_status	player.h	/^enum player_status$/;"	g
player_toggle	mpd.c	/^int player_toggle()$/;"	f
player_toggle	player.h	/^int player_toggle();$/;"	p	signature:()
poll_mutex	ui/ui_main.c	/^static pthread_mutex_t poll_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
port	http.h	/^    uint16_t port;$/;"	m	struct:http_addr	access:public
position	config.h	/^struct position $/;"	s
position::x	config.h	/^	int x;$/;"	m	struct:position	access:public
position::y	config.h	/^	int y;$/;"	m	struct:position	access:public
prmsg	log.c	/^void prmsg(enum msg_types msg_type, const char *format, ...)$/;"	f	signature:(enum msg_types msg_type, const char *format, ...)
prmsg	log.h	/^void prmsg(enum msg_types msg_type, const char *format, ...);$/;"	p	signature:(enum msg_types msg_type, const char *format, ...)
req_hdr	http.h	/^char *req_hdr[] = $/;"	v
req_hdr_ext	http.h	/^char *req_hdr_ext[] =$/;"	v
s_menu_lock	ui/ui_menu.c	/^static void s_menu_lock(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_lock	ui/ui_menu.c	/^static void s_menu_lock(GtkWidget *widget, GdkEventButton *event);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_next	ui/ui_menu.c	/^static void s_menu_next(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_next	ui/ui_menu.c	/^static void s_menu_next(GtkWidget *widget, GdkEventButton *event);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_prev	ui/ui_menu.c	/^static void s_menu_prev(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_prev	ui/ui_menu.c	/^static void s_menu_prev(GtkWidget *widget, GdkEventButton *event);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_quit	ui/ui_menu.c	/^static void s_menu_quit(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_quit	ui/ui_menu.c	/^static void s_menu_quit(GtkWidget *widget, GdkEventButton *event);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_skin	ui/ui_menu.c	/^static void s_menu_skin(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventButton *event)
s_menu_skin	ui/ui_menu.c	/^static void s_menu_skin(GtkWidget *widget, GdkEventButton *event);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventButton *event)
sig_exit	main.c	/^static void sig_exit(int signo)$/;"	f	file:	signature:(int signo)
sig_exit	main.c	/^static void sig_exit(int signo);$/;"	p	file:	signature:(int signo)
skin_conf	ui/ui.h	/^	char *skin_conf;$/;"	m	struct:ui_skin_entity	access:public
skin_menu_items	ui/ui_menu.c	/^static GtkWidget **skin_menu_items;$/;"	v	file:
skin_name	ui/ui.h	/^	char *skin_name;$/;"	m	struct:ui_skin_entity	access:public
src	ui/ui.h	/^	char *src;$/;"	m	struct:ui_skin_image	access:public
status_code	http.h	/^    unsigned int status_code;$/;"	m	struct:http_res	access:public
strstr_igcase	utils.c	/^char *strstr_igcase(const char *str, const char *need, int contain_need)$/;"	f	signature:(const char *str, const char *need, int contain_need)
strstr_igcase	utils.h	/^char *strstr_igcase(const char *str, const char *need, int contain_need);$/;"	p	signature:(const char *str, const char *need, int contain_need)
strstr_ln	utils.c	/^char *strstr_ln(char *src, char *buf, size_t size, const char *token)$/;"	f	signature:(char *src, char *buf, size_t size, const char *token)
strstr_ln	utils.h	/^char *strstr_ln(char *src, char *buf, size_t size, const char *token);$/;"	p	signature:(char *src, char *buf, size_t size, const char *token)
tail	http.h	/^    char *tail;$/;"	m	struct:http_res	access:public
tail_len	http.h	/^    unsigned long tail_len;$/;"	m	struct:http_res	access:public
test_config	main.c	/^static void test_config(const char *filename)$/;"	f	file:	signature:(const char *filename)
test_config	main.c	/^static void test_config(const char *filename);$/;"	p	file:	signature:(const char *filename)
time_flag	utils.h	/^enum time_flag$/;"	g
timeout_end	utils.h	78;"	d
timeout_start	utils.h	39;"	d
title	player.h	/^	char *title;$/;"	m	struct:player_music_info	access:public
title	ui/ui.h	/^	struct ui_skin_label *title;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
tname	http.h	/^    char *tname;$/;"	m	struct:file_type	access:public
to_hex	utils.c	/^static char to_hex(char ch)$/;"	f	file:	signature:(char ch)
to_hex	utils.c	/^static char to_hex(char ch);$/;"	p	file:	signature:(char ch)
trim	utils.c	/^char *trim(char *str)$/;"	f	signature:(char *str)
trim	utils.h	/^char *trim(char *str);$/;"	p	signature:(char *str)
type	http.h	/^    struct file_type *type;$/;"	m	struct:http_res	typeref:struct:http_res::file_type	access:public
ui_cover_init	ui/ui.h	/^void ui_cover_init(GtkWidget *fixed, GtkWidget *cover_container);$/;"	p	signature:(GtkWidget *fixed, GtkWidget *cover_container)
ui_cover_init	ui/ui_cover.c	/^void ui_cover_init(GtkWidget *fixed, GtkWidget *cover_container)$/;"	f	signature:(GtkWidget *fixed, GtkWidget *cover_container)
ui_cover_update	ui/ui.h	/^void ui_cover_update(struct player_music_info *info);$/;"	p	signature:(struct player_music_info *info)
ui_cover_update	ui/ui_cover.c	/^void ui_cover_update(struct player_music_info *info)$/;"	f	signature:(struct player_music_info *info)
ui_do_transparent	ui/ui_misc.c	/^static int ui_do_transparent(GtkWidget *widget, GdkEventExpose *event, void *data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventExpose *event, void *data)
ui_do_transparent	ui/ui_misc.c	/^static int ui_do_transparent(GtkWidget *widget, GdkEventExpose *event, void *data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventExpose *event, void *data)
ui_get_current_skin	ui/ui.h	/^struct ui_skin *ui_get_current_skin();$/;"	p	signature:()
ui_get_current_skin	ui/ui_skin.c	/^struct ui_skin *ui_get_current_skin()$/;"	f
ui_load	ui/ui.h	/^void ui_load();$/;"	p	signature:()
ui_load	ui/ui_main.c	/^void ui_load()$/;"	f
ui_make_img_btn	ui/ui_player_control.c	/^static GtkWidget *ui_make_img_btn(char *img_btn)$/;"	f	file:	signature:(char *img_btn)
ui_make_img_btn	ui/ui_player_control.c	/^static GtkWidget *ui_make_img_btn(char *img_btn);$/;"	p	file:	signature:(char *img_btn)
ui_make_label	ui/ui_player_info.c	/^static GtkWidget *ui_make_label(struct ui_skin_label *label, char *str)$/;"	f	file:	signature:(struct ui_skin_label *label, char *str)
ui_make_label	ui/ui_player_info.c	/^static GtkWidget *ui_make_label(struct ui_skin_label *label, char *str);$/;"	p	file:	signature:(struct ui_skin_label *label, char *str)
ui_menu_init	ui/ui.h	/^void ui_menu_init(GtkWidget *menu_container);$/;"	p	signature:(GtkWidget *menu_container)
ui_menu_init	ui/ui_menu.c	/^void ui_menu_init(GtkWidget *container)$/;"	f	signature:(GtkWidget *container)
ui_player_control_init	ui/ui.h	/^void ui_player_control_init(GtkWidget *fixed);$/;"	p	signature:(GtkWidget *fixed)
ui_player_control_init	ui/ui_player_control.c	/^void ui_player_control_init(GtkWidget *fixed)$/;"	f	signature:(GtkWidget *fixed)
ui_player_control_update	ui/ui.h	/^void ui_player_control_update();$/;"	p	signature:()
ui_player_control_update	ui/ui_player_control.c	/^void ui_player_control_update()$/;"	f
ui_player_info_init	ui/ui.h	/^void ui_player_info_init(GtkWidget *fixed);$/;"	p	signature:(GtkWidget *fixed)
ui_player_info_init	ui/ui_player_info.c	/^void ui_player_info_init(GtkWidget *fixed)$/;"	f	signature:(GtkWidget *fixed)
ui_player_info_update	ui/ui.h	/^void ui_player_info_update(struct player_music_info *info);$/;"	p	signature:(struct player_music_info *info)
ui_player_info_update	ui/ui_player_info.c	/^void ui_player_info_update(struct player_music_info *info)$/;"	f	signature:(struct player_music_info *info)
ui_poll	ui/ui_main.c	/^static int ui_poll(GtkWidget *widget)$/;"	f	file:	signature:(GtkWidget *widget)
ui_poll	ui/ui_main.c	/^static int ui_poll(GtkWidget *widget);$/;"	p	file:	signature:(GtkWidget *widget)
ui_set_transparent	ui/ui.h	/^int ui_set_transparent(GtkWidget *widget, GdkScreen *old_screen, void *data);$/;"	p	signature:(GtkWidget *widget, GdkScreen *old_screen, void *data)
ui_set_transparent	ui/ui_misc.c	/^int ui_set_transparent(GtkWidget *widget, GdkScreen *old_screen, void *data)$/;"	f	signature:(GtkWidget *widget, GdkScreen *old_screen, void *data)
ui_skin	ui/ui.h	/^struct ui_skin$/;"	s
ui_skin::album	ui/ui.h	/^	struct ui_skin_label *album;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
ui_skin::albumcover	ui/ui.h	/^	struct ui_skin_albumcover *albumcover;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_albumcover	access:public
ui_skin::artist	ui/ui.h	/^	struct ui_skin_label *artist;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
ui_skin::height	ui/ui.h	/^	int height;$/;"	m	struct:ui_skin	access:public
ui_skin::img_case	ui/ui.h	/^	struct ui_skin_image *img_case;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
ui_skin::img_next	ui/ui.h	/^	struct ui_skin_image *img_next;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
ui_skin::img_pause	ui/ui.h	/^	struct ui_skin_image *img_pause;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
ui_skin::img_play	ui/ui.h	/^	struct ui_skin_image *img_play;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
ui_skin::img_prev	ui/ui.h	/^	struct ui_skin_image *img_prev;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_image	access:public
ui_skin::name	ui/ui.h	/^	char *name;$/;"	m	struct:ui_skin	access:public
ui_skin::title	ui/ui.h	/^	struct ui_skin_label *title;$/;"	m	struct:ui_skin	typeref:struct:ui_skin::ui_skin_label	access:public
ui_skin::width	ui/ui.h	/^	int width;$/;"	m	struct:ui_skin	access:public
ui_skin_albumcover	ui/ui.h	/^struct ui_skin_albumcover$/;"	s
ui_skin_albumcover::height	ui/ui.h	/^	int height;$/;"	m	struct:ui_skin_albumcover	access:public
ui_skin_albumcover::nocover	ui/ui.h	/^	char *nocover;$/;"	m	struct:ui_skin_albumcover	access:public
ui_skin_albumcover::width	ui/ui.h	/^	int width;$/;"	m	struct:ui_skin_albumcover	access:public
ui_skin_albumcover::x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_albumcover	access:public
ui_skin_albumcover::y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_albumcover	access:public
ui_skin_entity	ui/ui.h	/^struct ui_skin_entity$/;"	s
ui_skin_entity::skin_conf	ui/ui.h	/^	char *skin_conf;$/;"	m	struct:ui_skin_entity	access:public
ui_skin_entity::skin_name	ui/ui.h	/^	char *skin_name;$/;"	m	struct:ui_skin_entity	access:public
ui_skin_entity_free	ui/ui.h	/^void ui_skin_entity_free(struct ui_skin_entity *ptr);$/;"	p	signature:(struct ui_skin_entity *ptr)
ui_skin_entity_free	ui/ui_skin.c	/^void ui_skin_entity_free(struct ui_skin_entity *ptr)$/;"	f	signature:(struct ui_skin_entity *ptr)
ui_skin_free	ui/ui.h	/^void ui_skin_free(struct ui_skin *ptr);$/;"	p	signature:(struct ui_skin *ptr)
ui_skin_free	ui/ui_skin.c	/^void ui_skin_free(struct ui_skin *ptr)$/;"	f	signature:(struct ui_skin *ptr)
ui_skin_getattr	ui/ui_skin.c	/^static char *ui_skin_getattr(xmlNode *root, char *node_name, char *attr_name)$/;"	f	file:	signature:(xmlNode *root, char *node_name, char *attr_name)
ui_skin_image	ui/ui.h	/^struct ui_skin_image$/;"	s
ui_skin_image::src	ui/ui.h	/^	char *src;$/;"	m	struct:ui_skin_image	access:public
ui_skin_image::x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_image	access:public
ui_skin_image::y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_image	access:public
ui_skin_image_free	ui/ui_skin.c	/^static void ui_skin_image_free(struct ui_skin_image *ptr)$/;"	f	file:	signature:(struct ui_skin_image *ptr)
ui_skin_image_free	ui/ui_skin.c	/^static void ui_skin_image_free(struct ui_skin_image *ptr);$/;"	p	file:	signature:(struct ui_skin_image *ptr)
ui_skin_image_read	ui/ui_skin.c	/^static struct ui_skin_image *ui_skin_image_read(xmlNode *root, char *node_name)$/;"	f	file:	signature:(xmlNode *root, char *node_name)
ui_skin_image_read	ui/ui_skin.c	/^static struct ui_skin_image *ui_skin_image_read(xmlNode *root, char *node_name);$/;"	p	file:	signature:(xmlNode *root, char *node_name)
ui_skin_label	ui/ui.h	/^struct ui_skin_label$/;"	s
ui_skin_label::align	ui/ui.h	/^	float align;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::color	ui/ui.h	/^	char *color;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::enable	ui/ui.h	/^	int enable;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::font	ui/ui.h	/^	char *font;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::max_char	ui/ui.h	/^	int max_char;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label::y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_label	access:public
ui_skin_label_free	ui/ui_skin.c	/^static void ui_skin_label_free(struct ui_skin_label *ptr)$/;"	f	file:	signature:(struct ui_skin_label *ptr)
ui_skin_label_free	ui/ui_skin.c	/^static void ui_skin_label_free(struct ui_skin_label *ptr);$/;"	p	file:	signature:(struct ui_skin_label *ptr)
ui_skin_label_read	ui/ui_skin.c	/^static struct ui_skin_label *ui_skin_label_read(xmlNode *root, char *node_name)$/;"	f	file:	signature:(xmlNode *root, char *node_name)
ui_skin_label_read	ui/ui_skin.c	/^static struct ui_skin_label *ui_skin_label_read(xmlNode *root, char *node_name);$/;"	p	file:	signature:(xmlNode *root, char *node_name)
ui_skin_load	ui/ui.h	/^struct ui_skin *ui_skin_load();$/;"	p	signature:()
ui_skin_load	ui/ui_skin.c	/^struct ui_skin *ui_skin_load(const char *skin_name)$/;"	f	signature:(const char *skin_name)
ui_skin_load_all	ui/ui.h	/^struct ui_skin_entity **ui_skin_load_all();$/;"	p	signature:()
ui_skin_load_all	ui/ui_skin.c	/^struct ui_skin_entity **ui_skin_load_all()$/;"	f
ui_skin_read_float	ui/ui_skin.c	/^static float ui_skin_read_float(xmlNode *root, char *node_name, char *attr_name, float *d)$/;"	f	file:	signature:(xmlNode *root, char *node_name, char *attr_name, float *d)
ui_skin_read_float	ui/ui_skin.c	/^static float ui_skin_read_float(xmlNode *root, char *node_name, char *attr_name, float *d);$/;"	p	file:	signature:(xmlNode *root, char *node_name, char *attr_name, float *d)
ui_skin_read_integer	ui/ui_skin.c	/^static int ui_skin_read_integer(xmlNode *root, char *node_name, char *attr_name, int *i)$/;"	f	file:	signature:(xmlNode *root, char *node_name, char *attr_name, int *i)
ui_skin_read_integer	ui/ui_skin.c	/^static int ui_skin_read_integer(xmlNode *root, char *node_name, char *attr_name, int *i);$/;"	p	file:	signature:(xmlNode *root, char *node_name, char *attr_name, int *i)
ui_skin_read_string	ui/ui_skin.c	/^static char *ui_skin_read_string(xmlNode *root, char *node_name, char *attr_name, char **s)$/;"	f	file:	signature:(xmlNode *root, char *node_name, char *attr_name, char **s)
ui_skin_read_string	ui/ui_skin.c	/^static char *ui_skin_read_string(xmlNode *root, char *node_name, char *attr_name, char **s);$/;"	p	file:	signature:(xmlNode *root, char *node_name, char *attr_name, char **s)
ui_tray_init	ui/ui.h	/^void ui_tray_init();$/;"	p	signature:()
ui_tray_init	ui/ui_menu.c	/^void ui_tray_init()$/;"	f
ui_update	ui/ui.h	/^void ui_update(const char *skin_name);$/;"	p	signature:(const char *skin_name)
ui_update	ui/ui_main.c	/^void ui_update(const char *skin_name)$/;"	f	signature:(const char *skin_name)
uri	http.h	/^    char *uri;$/;"	m	struct:http_addr	access:public
uri	player.h	/^	char *uri;$/;"	m	struct:player_music_info	access:public
url	http.h	/^    char *url;$/;"	m	struct:http_addr	access:public
url_decode	utils.c	/^char *url_decode(const char *str)$/;"	f	signature:(const char *str)
url_decode	utils.h	/^char *url_decode(const char *str);$/;"	p	signature:(const char *str)
url_encode	utils.c	/^char *url_encode(const char *str)$/;"	f	signature:(const char *str)
url_encode	utils.h	/^char *url_encode(const char *str);$/;"	p	signature:(const char *str)
usage	main.c	/^static void usage()$/;"	f	file:
usage	main.c	/^static void usage();$/;"	p	file:
value	config.c	/^        char *value;$/;"	m	struct:cfg	file:	access:public
version	main.c	/^static void version()$/;"	f	file:
version	main.c	/^static void version();$/;"	p	file:
width	ui/ui.h	/^	int width;$/;"	m	struct:ui_skin	access:public
width	ui/ui.h	/^	int width;$/;"	m	struct:ui_skin_albumcover	access:public
window	ui/ui_main.c	/^static GtkWidget *window;$/;"	v	file:
x	config.h	/^	int x;$/;"	m	struct:position	access:public
x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_albumcover	access:public
x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_image	access:public
x	ui/ui.h	/^	int x;$/;"	m	struct:ui_skin_label	access:public
y	config.h	/^	int y;$/;"	m	struct:position	access:public
y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_albumcover	access:public
y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_image	access:public
y	ui/ui.h	/^	int y;$/;"	m	struct:ui_skin_label	access:public
